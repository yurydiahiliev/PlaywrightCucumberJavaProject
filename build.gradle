plugins {
    id 'idea'
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id 'io.freefair.lombok' version '8.4'
}

group 'com.playwright.cucumber.project'
version '1.0-SNAPSHOT'

def cucumberVersion = '7.14.0'
def testNgVersion = '7.8.0'
def allureVersion = '2.24.0'
def playwrightVersion = '1.42.0'
def allureCucumberVersion = '2.21.0'
def logbackVersion = '1.4.14'

def cucumberThreadsOption = ['--threads', '3']
def setParallel = "false"

def cucumberOptions = [
        '--plugin', 'pretty',
        '--plugin', 'io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm',
        '--plugin', "rerun:target/failed_scenarios.txt",
        '--glue', 'com.playwright.cucumber.step_definitions',
        'src/test/resources/features'
]

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
    testCompile
}

dependencies {
    testImplementation "org.testng:testng:${testNgVersion}"
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "com.microsoft.playwright:playwright:${playwrightVersion}"
    implementation "io.cucumber:cucumber-java:${cucumberVersion}"
    implementation "io.cucumber:cucumber-testng:${cucumberVersion}"
    implementation "io.cucumber:cucumber-picocontainer:${cucumberVersion}"
    implementation platform("io.qameta.allure:allure-bom:$allureVersion")
    implementation "io.qameta.allure:allure-cucumber7-jvm:${allureCucumberVersion}"
    implementation "io.qameta.allure:allure-testng:${allureVersion}"
}

tasks.register('initPlaywright', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.microsoft.playwright.CLI"
    args 'install'
}

test {
    useTestNG() {
        useDefaultListeners = true
        suites 'src/test/resources/testng.xml'
    }
    scanForTestClasses = false
    testLogging.showStandardStreams = true

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.register('cucumber', JavaExec) {
    group = 'cucumber'
    description = 'Running UI tests'

    dependsOn assemble, compileTestJava

    mainClass = "io.cucumber.core.cli.Main"
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
    def isParallel = System.properties.getProperty("parallel", setParallel)
    if (isParallel == "true") cucumberOptions.addAll(cucumberThreadsOption)
    args = cucumberOptions
}

tasks.register('cucumberRerun', JavaExec) {
    group = 'cucumber'
    description = 'Execute rerun UI tests'

    onlyIf { tasks.cucumber.state.failure }

    def options = [
            '--plugin', 'pretty',
            '--plugin', 'io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm',
            '@target/failed_scenarios.txt'
    ]

    mainClass = "io.cucumber.core.cli.Main"
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
    def isParallel = System.properties.getProperty("parallel", setParallel)
    if (isParallel == "true") options.addAll(cucumberThreadsOption)
    args = options
}

tasks.register('pwServeTraces', JavaExec) {
    mainClass = 'com.microsoft.playwright.CLI'
    classpath = sourceSets.main.runtimeClasspath
    args 'show-trace', 'build/pw/' + System.getProperty("trace") + '.zip'
    systemProperties = System.getProperties() as Map<String, ?>
}

allure {
    version = allureVersion
}

cucumber.finalizedBy cucumberRerun
cucumber.finalizedBy('allureReport')
test.finalizedBy('allureReport')